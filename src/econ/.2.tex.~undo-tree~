(undo-tree-save-format-version . 1)
"af4e5710b54569e0117fefa072ba418d0b478585"
[nil nil nil nil (26358 22686 125477 365000) 0 nil]
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id1 . -1) (t 26358 13808 843216 547000)) nil (26358 22686 125475 899000) 0 nil])
([nil nil ((#("{\\bfseries " 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (face (bold) fontified t)) . 10) (undo-tree-id0 . -10)) nil (26358 22686 125472 48000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 24)) nil (26358 22686 125450 481000) 0 nil])
([nil nil ((#("\\bfseries " 0 9 (face font-lock-keyword-face fontified t) 9 10 (face (bold) fontified t)) . 27) (undo-tree-id13 . -9) (t 26358 22686 152497 379000)) nil (26358 22715 176588 919000) 0 nil])
([nil nil (27) nil (26358 22715 176587 79000) 0 nil])
([nil nil ((45 . 47) (27 . 45) (#("section" 0 7 (face font-lock-keyword-face fontified t)) . -27) (undo-tree-id9 . -7) (undo-tree-id10 . -7) (undo-tree-id11 . -7) 34 (31 . 34) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -31) (undo-tree-id12 . -1) (26 . 32)) nil (26358 22715 176585 471000) 0 nil])
([nil nil ((nil rear-nonsticky nil 160 . 161) (nil fontified nil 46 . 161) (46 . 161) 45) nil (26358 22715 176580 401000) 0 nil])
([nil nil ((226 . 227) (#("
" 0 1 (fontified t)) . -226) (151 . 152) (#("
" 0 1 (fontified t)) . -151) (85 . 86) (#("
" 0 1 (fontified t)) . -85) 34) nil (26358 22715 176578 468000) 0 nil])
([nil nil ((#("\\textsuperscript{2}" 0 16 (face font-lock-keyword-face fontified t) 16 19 (fontified t)) . 62) (undo-tree-id8 . -18)) nil (26358 22715 176576 437000) 0 nil])
([nil nil ((#("\\textsuperscript{3}" 0 16 (face font-lock-keyword-face fontified t) 16 19 (fontified t)) . 78) (undo-tree-id6 . -18) (undo-tree-id7 . -19)) nil (26358 22715 176574 603000) 0 nil])
([nil nil ((#("\\textsuperscript{4}" 0 16 (face font-lock-keyword-face fontified t) 16 19 (fontified t)) . 92) (undo-tree-id5 . -18)) nil (26358 22715 176571 716000) 0 nil])
([nil nil ((187 . 202) (714 . 727)) nil (26358 22715 176569 603000) 0 nil])
([nil nil ((#("\\end{center}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 11 (face font-lock-function-name-face fontified t latex-env-pair t) 11 12 (fontified t latex-env-pair t) 12 13 (fontified t)) . 729) (undo-tree-id2 . -12) (undo-tree-id3 . 13) (undo-tree-id4 . -11) 740) nil (26358 22715 176567 381000) 0 nil])
([nil nil ((nil rear-nonsticky nil 649 . 650) (#("
" 0 1 (fontified nil)) . -662) (649 . 663) 605) nil (26358 22715 176551 169000) 0 nil])
([nil nil ((1871 . 1872) (#("
" 0 1 (fontified t)) . -1871) (#("
" 0 1 (fontified t)) . -1871) 1814 (t 26358 22715 214923 704000)) nil (26358 22727 408642 68000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 1870)) nil (26358 22727 408640 885000) 0 nil])
([nil nil ((#("{\\bfseries " 0 1 (face (bold) fontified t) 1 10 (face (font-lock-keyword-face bold) fontified t) 10 11 (face (bold) fontified t)) . 1871) (undo-tree-id17 . -10)) nil (26358 22727 408640 205000) 0 nil])
([nil nil ((#("\\bfseries " 0 9 (face font-lock-keyword-face fontified t) 9 10 (face (bold) fontified t)) . 1815) (undo-tree-id16 . -9)) nil (26358 22727 408638 437000) 0 nil])
([nil nil (1815) nil (26358 22727 408636 489000) 0 nil])
([nil nil ((1826 . 1829) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -1826) (undo-tree-id14 . -1) (1819 . 1827) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -1819) (undo-tree-id15 . -1) (1814 . 1820)) nil (26358 22727 408634 30000) 0 nil])
([nil nil ((1905 . 1920) (2419 . 2432)) nil (26358 22727 408620 86000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3626) 3581 (t 26358 22727 437875 691000)) nil (26358 22740 439464 695000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 3625)) nil (26358 22740 439463 491000) 0 nil])
([nil nil ((3625 . 3626) (#("
" 0 1 (face (bold) fontified t)) . -3625) 3624) nil (26358 22740 439462 585000) 0 nil])
([nil nil ((#("{\\bfseries " 0 1 (face (bold) fontified t) 1 10 (face (font-lock-keyword-face bold) fontified t) 10 11 (face (bold) fontified t)) . 3626) (undo-tree-id22 . -10)) nil (26358 22740 439461 325000) 0 nil])
([nil nil ((#("\\bfseries " 0 9 (face font-lock-keyword-face fontified t) 9 10 (face (bold) fontified t)) . 3568) (undo-tree-id21 . -9)) nil (26358 22740 439459 796000) 0 nil])
([nil nil (3568) nil (26358 22740 439458 402000) 0 nil])
([nil nil ((3579 . 3582) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -3579) (undo-tree-id18 . -1) (3572 . 3580) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -3572) (undo-tree-id19 . -1) (3567 . 3573) (#("/" 0 1 (fontified t)) . -3567) (undo-tree-id20 . -1) 3568 (3567 . 3568)) nil (26358 22740 439455 826000) 0 nil])
([nil nil ((3658 . 3673) (4182 . 4195)) nil (26358 22809 696255 947000) 0 nil])
([nil nil ((4211 . 4232) (16411 . 16427) 4211 (t 26358 22740 497468 319000)) nil (26358 22817 36105 672000) 0 nil] [nil nil ((5303 . 5304) (#("{\\bfseries Introduction}. The global landscape of industrial and innovative
development is continuously evolving, influenced by varying national
strategies and economic conditions. As nations adapt to shifting
technological advancements and market demands, understanding these
dynamics becomes crucial for assessing their own industrial policies and
growth trajectories. This paper provides an in-depth examination of
industrial and innovative development principles, contrasting them with
the unique challenges and opportunities faced by Kazakhstan.

Beginning with an overview of successful industrial strategies employed
by foreign states, the study sets the stage for a comparative analysis.
It then shifts focus to Kazakhstan, exploring the significant hurdles
encountered by its manufacturing sector, which include structural
inefficiencies and competitive pressures. The paper further investigates
the complex landscape of Kazakhstan's oil and gas industry, identifying
key risks and potential growth avenues. Additionally, it assesses the
prospects and existing threats within the mining and metallurgical
complex, offering a comprehensive view of the sector's evolving
landscape.

By integrating international perspectives with a detailed analysis of
Kazakhstan\\textquotesingle s industrial environment, this paper aims to
provide valuable insights for policymakers, industry leaders, and
researchers interested in understanding and shaping Kazakhstan's
economic future.

{\\bfseries Methods. Principles of industrial-innovative development in
foreign states.} If we look at international experience, we can identify
common principles and approaches for organizing and implementing state
policies in industrial-innovative development.

1. System of industrial-innovative development management.

Industrial countries generally have a similar organizational structure
for state management of industrial development. The main elements of
this structure are:

1) Clear legislative regulation of industrial policy, which allows for
centralized and balanced industrial policy throughout the country,
systematizes and focuses the process and conditions of state support for
industry.

2) A central government body responsible for industrial development
policy, related services, and their promotion in international markets
(its tasks include formulating industrial-innovative development policy
considering the state's strategic priorities, creating a comprehensive
system of incentives and support measures for industrial-innovative
projects and industrial clusters, conducting trade policy aimed at
creating opportunities for expanding existing and new productions).

3) A coordinated system of institutions supporting industrial-innovative
development, including industrial development funds or agencies.

4) Large state or national private companies, specifically designated by
the state, with powers to attract investments and implement large
industrial projects and establish production in new sectors.

5) A unified scientific, technological, and innovation policy, directed
by plans, strategies, and programs of sectoral ministries and agencies.

2. Focus on high-value-added exports rather than commodities.

The experience of countries (Ireland, Canada, Vietnam, Botswana, Saudi
Arabia, Morocco) that have successfully diversified their economies
shows that state support is often complemented by a comprehensive
export-oriented industrial policy, focused on high-value-added
manufacturing sectors and products, through investments in productivity,
human capital, transportation-logistics infrastructure, and technology
transfer.

In Ireland, the export growth of manufacturing products between 2010 and
2016 was 174 {[}1{]}. This was supported by a state policy focused on
business development. For instance, the country has established a
favorable tax regime and provides financial assistance for the creation
of companies and their entry into international markets.

Another example is Vietnam, where the government has introduced a new
economic development model since 2010, involving restructuring of
industry and services, with an emphasis on supporting the production of
high-tech goods {[}1{]}. This led to the formation of a favorable
investment regime, significantly increasing foreign direct investment
and creating 135 industrial and export zones {[}1{]}.

Canada has developed a state support system for exporters with key
elements including {[}2{]}:

- Consulting services for Canadian companies on research and target
market selection abroad (export preparation, market potential
assessment, network identification, and problem-solving).

- The MY TCS online platform -- access to market information and
business opportunities.

- The Can Export program -- financial support for a wide range of export
operations to increase the competitiveness of Canadian companies,
providing up to 50 million dollars over 5 years in direct financial
support for small and medium-sized exporters, funding companies from any
sector, covering 50\\% of expenses.

- Financial support for business associations to create or expand
international cooperation.

- Business Women in International Trade -- providing targeted products
and services for women entrepreneurs aiming to enter global markets.

Canadian Technology Accelerators -- supporting high-growth Canadian
companies ready to enter global ICT and clean technology markets
{[}2{]}.

Thus, the key driver for export diversification is the private sector,
and states support their enterprises to develop and expand their export
capabilities through increased access to external markets beyond their
small domestic economies. In many countries, industrial growth is linked
to creating favorable conditions for access to large developed markets
(e.g., export subsidies, tax breaks, and easier financing).
High-value-added exports stimulate the production of quality goods,
work, and services, accelerates economic development, attracts foreign
capital into the manufacturing sector, and helps diversify revenue
sources in unstable global commodity markets.

3. International cooperation through integration into global value
chains.

Global value chains (GVCs) refer to the sequence of operations in which
products and services, undergoing various stages of development and
processing in different countries due to the global nature of the
economy, gain value (from the consumer's perspective).

Almost all countries aim to integrate into global value chains, which
enables technology transfer and enhances the country\\textquotesingle s
industrial potential. However, developing countries must adhere to free
market rules -- offering the best quality at minimal cost {[}3{]}.

4. Development of value chains through attracting global players in
manufacturing sectors.

Transnational companies play a crucial role in global value chains. The
acceleration of globalization and the worldwide distribution of
available raw materials, cheap labor, and potential markets have led
transnational companies to benefit from maintaining geographically
separated production facilities, research and development centers, and
markets. The primary value is created not in the physical production of
goods but in high-tech areas with a concentration of highly qualified
labor.

Conversely, concentrating highly qualified specialists, scientific
infrastructure, and engineering systems in manufacturing industries
allows countries to increase competencies in advancing in the value
chain, moving from lower to middle and upper-tier production. The main
distinctions of these product categories are the complexity of the
produced goods and their dependence on primary raw materials.

Lower-tier products typically use primary raw materials directly, whose
prices are often set on commodity exchanges and are fluctuating, leading
to variability in production volume and export depending on external
conditions. On the other hand, middle and upper-tier products have more
stable production and are less dependent on primary raw material prices,
as high technology and scientific labor constitute a larger portion of
their cost.

Therefore, developing countries focus on creating attractive offers for
transnational companies, balanced by the \"price/quality\" criterion. Key
aspects of integrating into global value chains include developing a
strong scientific-technological base, building a qualified workforce,
effectively using opportunities within international integration
associations, developing trade agreements with promising partners, and
implementing cluster policies to enhance value chains and
competitiveness within the country.

In Kazakhstan, further integration into global value chains is
necessary, with an expansion of cooperation with existing and new
transnational companies. Developing relationships with transnational
companies already operating in Kazakhstan should be based on mutually
beneficial cooperation considering Kazakhstan\\textquotesingle s
interests. This will be achieved through expanding the range of produced
goods and deepening production to diversify and complicate the
country\\textquotesingle s economy.

It should be noted that several global transnational companies (e.g.,
Arcelor Mittal, POSCO, LOTTE, Schneider Electric) are currently
operating in the country {[}1{]}. However, these companies are either
working with Kazakh enterprises in lower-tier production, outdated
products, or have just begun fruitful cooperation. Therefore, a balanced
and planned approach to cooperation with transnational companies is
needed to develop and deepen existing cooperation. A notable example of
integration into global value chains in Kazakhstan is the limited
liability partnership \"POSUK Titanium,\" which produces titanium slabs
that are subsequently supplied to Boeing through the value chain
{[}1{]}.

Attracting new transnational companies should also align with the
state\\textquotesingle s interests in achieving set goals, specifically
producing new high-value-added goods and exporting to global markets
through the distribution channels of transnational partners.

5. Implementing tools for attracting global players to integrate into
global value chains.

One of the primary tasks for attracting foreign investors should be
focusing on global leaders in manufacturing industries that have their
distribution channels in the global value chain.

Investment planning and integration into global value chains will
include implementing a unified map of priority goods and services. This
tool involves identifying a list of the most promising goods/product
groups for localization within the country, considering workforce,
technological, and raw material availability, as well as export markets.

This list of goods addresses both state and business interests. From the
state's perspective, priority goods will focus on expanding product
range, diversification, and complexity of production. For businesses,
the list can serve as a guide for creating new productions with growth
potential and entry into external markets.
" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 23 (face (bold) fontified t) 23 1270 (fontified t) 1270 1286 (face font-lock-keyword-face fontified t) 1286 1419 (fontified t) 1419 1463 (fontified t) 1463 1482 (fontified t) 1482 1491 (face font-lock-keyword-face fontified t) 1491 1567 (face (bold) fontified t) 1567 2963 (fontified t) 2963 3012 (fontified t) 3012 4512 (fontified t) 4512 4546 (fontified t) 4546 5056 (fontified t) 5056 5058 (face font-lock-keyword-face fontified t) 5058 6046 (fontified t) 6046 6075 (fontified t) 6075 6582 (fontified t) 6582 6598 (face font-lock-keyword-face fontified t) 6598 7575 (fontified t) 7575 7600 (fontified t) 7600 9000 (fontified t) 9000 9016 (face font-lock-keyword-face fontified t) 9016 9100 (fontified t) 9100 9155 (fontified t) 9155 9162 (fontified t) 9162 9178 (face font-lock-keyword-face fontified t) 9178 9957 (fontified t) 9957 9973 (face font-lock-keyword-face fontified t) 9973 10655 (fontified t) 10655 10709 (fontified t) 10709 11108 (fontified t)) . 5303) (undo-tree-id23 . -11107) (undo-tree-id24 . -11065) (undo-tree-id25 . -14) (undo-tree-id26 . -11065) (undo-tree-id27 . -9886) (undo-tree-id28 . -14) (undo-tree-id29 . -551) (undo-tree-id30 . -1189) (undo-tree-id31 . -1480) (undo-tree-id32 . -1743) (undo-tree-id33 . -1803) (undo-tree-id34 . -1964) (undo-tree-id35 . -2186) (undo-tree-id36 . -2672) (undo-tree-id37 . -2811) (undo-tree-id38 . -3012) (undo-tree-id39 . -3157) (undo-tree-id40 . -3220) (undo-tree-id41 . -3643) (undo-tree-id42 . -3982) (undo-tree-id43 . -4381) (undo-tree-id44 . -4477) (undo-tree-id45 . -4666) (undo-tree-id46 . -4756) (undo-tree-id47 . -5072) (undo-tree-id48 . -5166) (undo-tree-id49 . -5307) (undo-tree-id50 . -5450) (undo-tree-id51 . -6121) (undo-tree-id52 . -6197) (undo-tree-id53 . -6459) (undo-tree-id54 . -6740) (undo-tree-id55 . -6832) (undo-tree-id56 . -7325) (undo-tree-id57 . -7729) (undo-tree-id58 . -8172) (undo-tree-id59 . -8686) (undo-tree-id60 . -9190) (undo-tree-id61 . -9885) (undo-tree-id62 . -10153) (undo-tree-id63 . -10245) (undo-tree-id64 . -10434) (undo-tree-id65 . -10782) (undo-tree-id66 . -11108) (undo-tree-id67 . -3220) (undo-tree-id68 . -11108) (undo-tree-id69 . -11108) (undo-tree-id70 . -11108) (undo-tree-id71 . -11108) (undo-tree-id72 . -11108) (undo-tree-id73 . -11108) (undo-tree-id74 . -11108) (undo-tree-id75 . -11108) (undo-tree-id76 . -11108) (undo-tree-id77 . -11108) (undo-tree-id78 . -11108) (undo-tree-id79 . -11108) (undo-tree-id80 . -11108) (undo-tree-id81 . -11108) (undo-tree-id82 . -11108) (undo-tree-id83 . -11065) (undo-tree-id84 . -11065) (undo-tree-id85 . -11065) (undo-tree-id86 . -11065) (undo-tree-id87 . -11065) (undo-tree-id88 . -11065) (undo-tree-id89 . -11065) (undo-tree-id90 . -11065) (undo-tree-id91 . -11065) (undo-tree-id92 . -11065) (undo-tree-id93 . -11065) (undo-tree-id94 . -11065) (undo-tree-id95 . -11065) (undo-tree-id96 . -11065) (undo-tree-id97 . -11065) (undo-tree-id98 . -11065) (undo-tree-id99 . -11065) (undo-tree-id100 . -11065) (undo-tree-id101 . -11065) (undo-tree-id102 . -11065) (undo-tree-id103 . -11065) (undo-tree-id104 . -11065) (undo-tree-id105 . -11065) (undo-tree-id106 . -11108) (undo-tree-id107 . -11108) 16368 (t 26358 22740 497468 319000)) ((5303 . 16411) (#("
" 0 1 (fontified t)) . 5303) (undo-tree-id108 . 1)) (26358 22809 695932 946000) 0 nil])
([nil nil ((16631 . 16632) (#("
" 0 1 (face (bold) fontified t)) . -16631) 16557 (t 26358 22817 85080 887000)) nil (26358 22829 86659 107000) 0 nil])
nil
([nil nil ((#("Figure 1 - Global value chains, commodity chains and production networks {[}3{]}.}" 0 63 (face (bold) fontified t) 63 64 (face (bold) fontified t) 64 81 (face (bold) fontified t) 81 82 (fontified t)) . 16568) (undo-tree-id116 . -81)) nil (26358 22829 86657 782000) 0 nil])
([nil nil ((nil rear-nonsticky nil 16622 . 16623) (nil fontified nil 16541 . 16623) (16541 . 16623)) nil (26358 22829 86656 59000) 0 nil])
([nil nil ((#("{\\bfseries 
" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (face (bold) fontified t) 11 12 (face (bold) fontified t)) . 16639) (undo-tree-id111 . -11) (undo-tree-id112 . -12) (undo-tree-id113 . -12) (undo-tree-id114 . -12) (undo-tree-id115 . -10) 16649) nil (26358 22829 86654 247000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 16639)) nil (26358 22829 86648 418000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 16623) (undo-tree-id109 . -1) (undo-tree-id110 . -1)) nil (26358 22829 86644 790000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . -16505) (t 26358 22829 131372 287000) (16506 . 16507) 16505 (t 26358 22829 131372 287000)) nil (26358 22842 1180 126000) 0 nil])
([nil nil ((nil fontified t 16505 . 16506) (#("7" 0 1 (fontified t)) . -16505) (16506 . 16507) 16505) nil (26358 22842 1174 903000) 0 nil])
([nil nil ((16638 . 16659) (29983 . 29999) (t 26358 22842 40970 188000)) nil (26358 22862 973892 512000) 0 nil])
([nil nil ((30021 . 30036) (30044 . 30057)) nil (26358 22862 973888 249000) 0 nil])
([nil nil ((#("\\begin{enumerate}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (latex-env-pair t fontified t) 7 16 (face font-lock-function-name-face latex-env-pair t fontified t) 16 17 (latex-env-pair t fontified t) 17 18 (fontified t)) . 30073) (undo-tree-id175 . -17) (t 26358 22863 30316 575000)) nil (26358 22889 520939 918000) 0 nil])
([nil nil ((#("\\def\\labelenumi{\\arabic{enumi}.}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 15 (face font-lock-function-name-face fontified t) 15 16 (fontified t) 16 23 (face font-lock-keyword-face fontified t) 23 32 (fontified t) 32 33 (fontified t)) . 30073) (undo-tree-id174 . -32)) nil (26358 22889 520938 559000) 0 nil])
([nil nil ((nil fontified t 31577 . 31580) (nil face font-lock-keyword-face 31577 . 31580) (#("\\item" 0 5 (face font-lock-keyword-face fontified t)) . -31577) (31582 . 31585) (nil fontified t 31435 . 31438) (nil face font-lock-keyword-face 31435 . 31438) (#("\\item" 0 5 (face font-lock-keyword-face fontified t)) . -31435) (31440 . 31443) (nil fontified t 31154 . 31157) (nil face font-lock-keyword-face 31154 . 31157) (#("\\item" 0 5 (face font-lock-keyword-face fontified t)) . -31154) (31159 . 31162) (nil fontified t 30942 . 30945) (nil face font-lock-keyword-face 30942 . 30945) (#("\\item" 0 5 (face font-lock-keyword-face fontified t)) . -30942) (30947 . 30950) (nil fontified t 30778 . 30781) (nil face font-lock-keyword-face 30778 . 30781) (#("\\item" 0 5 (face font-lock-keyword-face fontified t)) . -30778) (30783 . 30786) (nil fontified t 30527 . 30530) (nil face font-lock-keyword-face 30527 . 30530) (#("\\item" 0 5 (face font-lock-keyword-face fontified t)) . -30527) (30532 . 30535) (nil fontified t 30318 . 30321) (nil face font-lock-keyword-face 30318 . 30321) (#("\\item" 0 5 (face font-lock-keyword-face fontified t)) . -30318) (30323 . 30326) (nil fontified t 30073 . 30076) (nil face font-lock-keyword-face 30073 . 30076) (#("\\item" 0 5 (face font-lock-keyword-face fontified t)) . -30073) (30078 . 30081)) nil (26358 22889 520935 896000) 0 nil])
([nil nil ((#("\\end{enumerate}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (latex-env-pair t fontified t) 5 14 (face font-lock-function-name-face latex-env-pair t fontified t) 14 15 (latex-env-pair t fontified t) 15 16 (fontified t)) . 31796) (undo-tree-id172 . -15) (undo-tree-id173 . 16)) nil (26358 22889 520931 139000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -31578) (31579 . 31580) (#("1" 0 1 (fontified t)) . -31436) (31437 . 31438) (#("1" 0 1 (fontified t)) . -31155) (31156 . 31157) (#("1" 0 1 (fontified t)) . -30943) (30944 . 30945) (#("1" 0 1 (fontified t)) . -30779) (30780 . 30781) (#("1" 0 1 (fontified t)) . -30528) (30529 . 30530) (#("1" 0 1 (fontified t)) . -30319) (30320 . 30321)) nil (26358 22889 520927 835000) 0 nil])
([nil nil ((30074 . 30094) (31796 . 31814)) nil (26358 22889 520925 270000) 0 nil])
([nil nil ((31881 . 31901) (32380 . 32398)) nil (26358 22889 520924 572000) 0 nil])
([nil nil ((32459 . 32479) (32931 . 32949)) nil (26358 22889 520923 735000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32950) (undo-tree-id170 . -1) (undo-tree-id171 . -1)) nil (26358 22889 520922 933000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32944) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1)) nil (26358 22889 520920 545000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32944) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1)) nil (26358 22889 520911 723000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32944) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1)) nil (26358 22889 520907 269000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32944) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1)) nil (26358 22889 520902 704000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32944) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1)) nil (26358 22889 520896 539000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32944) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1)) nil (26358 22889 520884 146000) 0 nil])
([nil nil ((32919 . 32920) (#(" " 0 1 (fontified nil)) . -32919) (32918 . 32919) (t 26358 22889 579491 545000)) nil (26358 22915 33444 640000) 0 nil])
([nil nil ((32813 . 32814) (#(" " 0 1 (fontified nil)) . 32812) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (32813 . 32814)) nil (26358 22915 33439 405000) 0 nil])
([nil nil ((32375 . 32376) (#(" " 0 1 (fontified nil)) . 32374) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (32375 . 32376) (t 26358 22915 95387 318000)) nil (26358 22921 739311 685000) 0 nil])
([nil nil ((32274 . 32275) (#(" " 0 1 (fontified nil)) . 32273) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (32274 . 32275)) nil (26358 22921 739302 442000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -31341) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) 31343 (31340 . 31343) (t 26358 22921 795184 850000) 31339) nil (26358 22933 957167 934000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -31045) (undo-tree-id278 . -2) 31047 (31044 . 31047) (t 26358 22933 984816 422000) 31038) nil (26358 22938 906864 300000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -30430) (undo-tree-id279 . -2) 30432 (30429 . 30432) (t 26358 22938 951332 959000) 30408) nil (26358 22944 927853 464000) 0 nil])
([nil nil ((31138 . 31141) (t 26358 22944 951151 574000) 31047) nil (26358 22952 262732 243000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -31141) (undo-tree-id283 . -1) 31142 (31141 . 31142) (t 26358 22952 300929 359000)) nil (26358 22972 750049 192000) 0 nil])
([nil nil ((30886 . 30888) (#("
" 0 1 (fontified t)) . -30886) (undo-tree-id280 . -1) 30887 (30886 . 30887) (#("  " 0 2 (fontified nil)) . 30885) (undo-tree-id281 . -2) (30885 . 30888) (#(" " 0 1 (fontified nil)) . 30884) (undo-tree-id282 . -1) (30885 . 30886)) nil (26358 22972 750046 63000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -31749) (#("  " 0 2 (fontified t)) . -31683) (#("  " 0 2 (fontified t)) . -31624) (#("  " 0 2 (fontified t)) . -31554) (#("  " 0 2 (fontified t)) . -31483) (#("  " 0 2 (fontified t)) . -31416) (#("  " 0 2 (fontified t)) . -31377) (#("  " 0 2 (fontified t)) . -31302) (#("  " 0 2 (fontified t)) . -31282) (#("  " 0 2 (fontified t)) . -31212) (#("  " 0 2 (fontified t)) . -31144) (#("  " 0 2 (fontified t)) . -31105) (#("  " 0 2 (fontified t)) . -31104) (#("  " 0 2 (fontified t)) . -31014) (#("  " 0 2 (fontified t)) . -31008) (#("  " 0 2 (fontified t)) . -30938) (#("  " 0 2 (fontified t)) . -30908) (#("  " 0 2 (fontified t)) . -30858) (#("  " 0 2 (fontified t)) . -30845) (#("  " 0 2 (fontified t)) . -30779) (#("  " 0 2 (fontified t)) . -30740) (#("  " 0 2 (fontified t)) . -30665) (#("  " 0 2 (fontified t)) . -30606) (#("  " 0 2 (fontified t)) . -30536) (#("  " 0 2 (fontified t)) . -30497) (#("  " 0 2 (fontified t)) . -30419) (#("  " 0 2 (fontified t)) . -30398) (#("  " 0 2 (fontified t)) . -30334) (#("  " 0 2 (fontified t)) . -30304) (#("  " 0 2 (fontified t)) . -30236) (#("  " 0 2 (fontified t)) . -30168) (#("  " 0 2 (fontified t)) . -30097) 31811) nil (26358 22972 750028 166000) 0 nil])
([nil nil ((30190 . 30191) (#(" " 0 1 (fontified nil)) . 30189) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (30190 . 30191) (t 26358 22972 796976 209000)) nil (26358 22990 118204 610000) 0 nil])
([nil nil ((30497 . 30498) (t 26358 22990 156451 97000) 30420) nil (26358 22996 161114 293000) 0 nil])
([nil nil ((31378 . 31379) (t 26358 22996 189601 909000) 31304) nil (26358 23005 240613 84000) 0 nil])
([nil nil ((30253 . 30254) (#(" " 0 1 (fontified nil)) . 30252) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (30253 . 30254) (t 26358 23005 289326 571000)) nil (26358 23023 166121 911000) 0 nil])
([nil current ((24 . 137) 10 (t 26358 35042 477251 844000)) nil (26361 52780 122681 369000) 0 nil])
nil
